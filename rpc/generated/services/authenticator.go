// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package services

import (
	"bytes"
	"fmt"
	"git-wip-us.apache.org/repos/asf/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type Authenticator interface { //Authenticator service

	// Parameters:
	//  - DomainID
	//  - Name
	//  - Password
	CreateSession(domainID string, name string, password string) (r *Session, err error)
	// Parameters:
	//  - SessionID
	CheckSession(sessionID string) (r bool, err error)
	// Parameters:
	//  - SessionID
	DeleteSession(sessionID string) (r bool, err error)
}

//Authenticator service
type AuthenticatorClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewAuthenticatorClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AuthenticatorClient {
	return &AuthenticatorClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewAuthenticatorClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AuthenticatorClient {
	return &AuthenticatorClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - DomainID
//  - Name
//  - Password
func (p *AuthenticatorClient) CreateSession(domainID string, name string, password string) (r *Session, err error) {
	if err = p.sendCreateSession(domainID, name, password); err != nil {
		return
	}
	return p.recvCreateSession()
}

func (p *AuthenticatorClient) sendCreateSession(domainID string, name string, password string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateSessionArgs{
		DomainID: domainID,
		Name:     name,
		Password: password,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AuthenticatorClient) recvCreateSession() (value *Session, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createSession failed: out of sequence response")
		return
	}
	result := CreateSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error1 != nil {
		err = result.Error1
		return
	} else if result.Error2 != nil {
		err = result.Error2
		return
	} else if result.Error3 != nil {
		err = result.Error3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionID
func (p *AuthenticatorClient) CheckSession(sessionID string) (r bool, err error) {
	if err = p.sendCheckSession(sessionID); err != nil {
		return
	}
	return p.recvCheckSession()
}

func (p *AuthenticatorClient) sendCheckSession(sessionID string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("checkSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CheckSessionArgs{
		SessionID: sessionID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AuthenticatorClient) recvCheckSession() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkSession failed: out of sequence response")
		return
	}
	result := CheckSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error1 != nil {
		err = result.Error1
		return
	} else if result.Error2 != nil {
		err = result.Error2
		return
	} else if result.Error3 != nil {
		err = result.Error3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionID
func (p *AuthenticatorClient) DeleteSession(sessionID string) (r bool, err error) {
	if err = p.sendDeleteSession(sessionID); err != nil {
		return
	}
	return p.recvDeleteSession()
}

func (p *AuthenticatorClient) sendDeleteSession(sessionID string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteSessionArgs{
		SessionID: sessionID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AuthenticatorClient) recvDeleteSession() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteSession failed: out of sequence response")
		return
	}
	result := DeleteSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error1 != nil {
		err = result.Error1
		return
	} else if result.Error2 != nil {
		err = result.Error2
		return
	} else if result.Error3 != nil {
		err = result.Error3
		return
	}
	value = result.GetSuccess()
	return
}

type AuthenticatorProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Authenticator
}

func (p *AuthenticatorProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AuthenticatorProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AuthenticatorProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAuthenticatorProcessor(handler Authenticator) *AuthenticatorProcessor {

	self6 := &AuthenticatorProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self6.processorMap["createSession"] = &authenticatorProcessorCreateSession{handler: handler}
	self6.processorMap["checkSession"] = &authenticatorProcessorCheckSession{handler: handler}
	self6.processorMap["deleteSession"] = &authenticatorProcessorDeleteSession{handler: handler}
	return self6
}

func (p *AuthenticatorProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x7.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x7

}

type authenticatorProcessorCreateSession struct {
	handler Authenticator
}

func (p *authenticatorProcessorCreateSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateSessionResult{}
	var retval *Session
	var err2 error
	if retval, err2 = p.handler.CreateSession(args.DomainID, args.Name, args.Password); err2 != nil {
		switch v := err2.(type) {
		case *ServerError:
			result.Error1 = v
		case *BadRequest:
			result.Error2 = v
		case *Forbidden:
			result.Error3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSession: "+err2.Error())
			oprot.WriteMessageBegin("createSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type authenticatorProcessorCheckSession struct {
	handler Authenticator
}

func (p *authenticatorProcessorCheckSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CheckSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CheckSessionResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.CheckSession(args.SessionID); err2 != nil {
		switch v := err2.(type) {
		case *ServerError:
			result.Error1 = v
		case *BadRequest:
			result.Error2 = v
		case *Forbidden:
			result.Error3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkSession: "+err2.Error())
			oprot.WriteMessageBegin("checkSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("checkSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type authenticatorProcessorDeleteSession struct {
	handler Authenticator
}

func (p *authenticatorProcessorDeleteSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteSessionResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DeleteSession(args.SessionID); err2 != nil {
		switch v := err2.(type) {
		case *ServerError:
			result.Error1 = v
		case *BadRequest:
			result.Error2 = v
		case *Forbidden:
			result.Error3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteSession: "+err2.Error())
			oprot.WriteMessageBegin("deleteSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("deleteSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type CreateSessionArgs struct {
	DomainID string `thrift:"domainID,1" json:"domainID"`
	Name     string `thrift:"name,2" json:"name"`
	Password string `thrift:"password,3" json:"password"`
}

func NewCreateSessionArgs() *CreateSessionArgs {
	return &CreateSessionArgs{}
}

func (p *CreateSessionArgs) GetDomainID() string {
	return p.DomainID
}

func (p *CreateSessionArgs) GetName() string {
	return p.Name
}

func (p *CreateSessionArgs) GetPassword() string {
	return p.Password
}
func (p *CreateSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateSessionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DomainID = v
	}
	return nil
}

func (p *CreateSessionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateSessionArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *CreateSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSession_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("domainID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:domainID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DomainID)); err != nil {
		return fmt.Errorf("%T.domainID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:domainID: %s", p, err)
	}
	return err
}

func (p *CreateSessionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:name: %s", p, err)
	}
	return err
}

func (p *CreateSessionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:password: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return fmt.Errorf("%T.password (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:password: %s", p, err)
	}
	return err
}

func (p *CreateSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSessionArgs(%+v)", *p)
}

type CreateSessionResult struct {
	Success *Session     `thrift:"success,0" json:"success"`
	Error1  *ServerError `thrift:"error1,1" json:"error1"`
	Error2  *BadRequest  `thrift:"error2,2" json:"error2"`
	Error3  *Forbidden   `thrift:"error3,3" json:"error3"`
}

func NewCreateSessionResult() *CreateSessionResult {
	return &CreateSessionResult{}
}

var CreateSessionResult_Success_DEFAULT *Session

func (p *CreateSessionResult) GetSuccess() *Session {
	if !p.IsSetSuccess() {
		return CreateSessionResult_Success_DEFAULT
	}
	return p.Success
}

var CreateSessionResult_Error1_DEFAULT *ServerError

func (p *CreateSessionResult) GetError1() *ServerError {
	if !p.IsSetError1() {
		return CreateSessionResult_Error1_DEFAULT
	}
	return p.Error1
}

var CreateSessionResult_Error2_DEFAULT *BadRequest

func (p *CreateSessionResult) GetError2() *BadRequest {
	if !p.IsSetError2() {
		return CreateSessionResult_Error2_DEFAULT
	}
	return p.Error2
}

var CreateSessionResult_Error3_DEFAULT *Forbidden

func (p *CreateSessionResult) GetError3() *Forbidden {
	if !p.IsSetError3() {
		return CreateSessionResult_Error3_DEFAULT
	}
	return p.Error3
}
func (p *CreateSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateSessionResult) IsSetError1() bool {
	return p.Error1 != nil
}

func (p *CreateSessionResult) IsSetError2() bool {
	return p.Error2 != nil
}

func (p *CreateSessionResult) IsSetError3() bool {
	return p.Error3 != nil
}

func (p *CreateSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateSessionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Session{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateSessionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Error1 = &ServerError{}
	if err := p.Error1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error1, err)
	}
	return nil
}

func (p *CreateSessionResult) ReadField2(iprot thrift.TProtocol) error {
	p.Error2 = &BadRequest{}
	if err := p.Error2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error2, err)
	}
	return nil
}

func (p *CreateSessionResult) ReadField3(iprot thrift.TProtocol) error {
	p.Error3 = &Forbidden{}
	if err := p.Error3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error3, err)
	}
	return nil
}

func (p *CreateSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSession_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError1() {
		if err := oprot.WriteFieldBegin("error1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:error1: %s", p, err)
		}
		if err := p.Error1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:error1: %s", p, err)
		}
	}
	return err
}

func (p *CreateSessionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetError2() {
		if err := oprot.WriteFieldBegin("error2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:error2: %s", p, err)
		}
		if err := p.Error2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:error2: %s", p, err)
		}
	}
	return err
}

func (p *CreateSessionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetError3() {
		if err := oprot.WriteFieldBegin("error3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:error3: %s", p, err)
		}
		if err := p.Error3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:error3: %s", p, err)
		}
	}
	return err
}

func (p *CreateSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSessionResult(%+v)", *p)
}

type CheckSessionArgs struct {
	SessionID string `thrift:"sessionID,1" json:"sessionID"`
}

func NewCheckSessionArgs() *CheckSessionArgs {
	return &CheckSessionArgs{}
}

func (p *CheckSessionArgs) GetSessionID() string {
	return p.SessionID
}
func (p *CheckSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckSessionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionID = v
	}
	return nil
}

func (p *CheckSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkSession_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sessionID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionID)); err != nil {
		return fmt.Errorf("%T.sessionID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sessionID: %s", p, err)
	}
	return err
}

func (p *CheckSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckSessionArgs(%+v)", *p)
}

type CheckSessionResult struct {
	Success *bool        `thrift:"success,0" json:"success"`
	Error1  *ServerError `thrift:"error1,1" json:"error1"`
	Error2  *BadRequest  `thrift:"error2,2" json:"error2"`
	Error3  *Forbidden   `thrift:"error3,3" json:"error3"`
}

func NewCheckSessionResult() *CheckSessionResult {
	return &CheckSessionResult{}
}

var CheckSessionResult_Success_DEFAULT bool

func (p *CheckSessionResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return CheckSessionResult_Success_DEFAULT
	}
	return *p.Success
}

var CheckSessionResult_Error1_DEFAULT *ServerError

func (p *CheckSessionResult) GetError1() *ServerError {
	if !p.IsSetError1() {
		return CheckSessionResult_Error1_DEFAULT
	}
	return p.Error1
}

var CheckSessionResult_Error2_DEFAULT *BadRequest

func (p *CheckSessionResult) GetError2() *BadRequest {
	if !p.IsSetError2() {
		return CheckSessionResult_Error2_DEFAULT
	}
	return p.Error2
}

var CheckSessionResult_Error3_DEFAULT *Forbidden

func (p *CheckSessionResult) GetError3() *Forbidden {
	if !p.IsSetError3() {
		return CheckSessionResult_Error3_DEFAULT
	}
	return p.Error3
}
func (p *CheckSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckSessionResult) IsSetError1() bool {
	return p.Error1 != nil
}

func (p *CheckSessionResult) IsSetError2() bool {
	return p.Error2 != nil
}

func (p *CheckSessionResult) IsSetError3() bool {
	return p.Error3 != nil
}

func (p *CheckSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckSessionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *CheckSessionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Error1 = &ServerError{}
	if err := p.Error1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error1, err)
	}
	return nil
}

func (p *CheckSessionResult) ReadField2(iprot thrift.TProtocol) error {
	p.Error2 = &BadRequest{}
	if err := p.Error2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error2, err)
	}
	return nil
}

func (p *CheckSessionResult) ReadField3(iprot thrift.TProtocol) error {
	p.Error3 = &Forbidden{}
	if err := p.Error3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error3, err)
	}
	return nil
}

func (p *CheckSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkSession_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CheckSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError1() {
		if err := oprot.WriteFieldBegin("error1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:error1: %s", p, err)
		}
		if err := p.Error1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:error1: %s", p, err)
		}
	}
	return err
}

func (p *CheckSessionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetError2() {
		if err := oprot.WriteFieldBegin("error2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:error2: %s", p, err)
		}
		if err := p.Error2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:error2: %s", p, err)
		}
	}
	return err
}

func (p *CheckSessionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetError3() {
		if err := oprot.WriteFieldBegin("error3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:error3: %s", p, err)
		}
		if err := p.Error3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:error3: %s", p, err)
		}
	}
	return err
}

func (p *CheckSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckSessionResult(%+v)", *p)
}

type DeleteSessionArgs struct {
	SessionID string `thrift:"sessionID,1" json:"sessionID"`
}

func NewDeleteSessionArgs() *DeleteSessionArgs {
	return &DeleteSessionArgs{}
}

func (p *DeleteSessionArgs) GetSessionID() string {
	return p.SessionID
}
func (p *DeleteSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteSessionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionID = v
	}
	return nil
}

func (p *DeleteSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteSession_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sessionID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionID)); err != nil {
		return fmt.Errorf("%T.sessionID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sessionID: %s", p, err)
	}
	return err
}

func (p *DeleteSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSessionArgs(%+v)", *p)
}

type DeleteSessionResult struct {
	Success *bool        `thrift:"success,0" json:"success"`
	Error1  *ServerError `thrift:"error1,1" json:"error1"`
	Error2  *BadRequest  `thrift:"error2,2" json:"error2"`
	Error3  *Forbidden   `thrift:"error3,3" json:"error3"`
}

func NewDeleteSessionResult() *DeleteSessionResult {
	return &DeleteSessionResult{}
}

var DeleteSessionResult_Success_DEFAULT bool

func (p *DeleteSessionResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DeleteSessionResult_Success_DEFAULT
	}
	return *p.Success
}

var DeleteSessionResult_Error1_DEFAULT *ServerError

func (p *DeleteSessionResult) GetError1() *ServerError {
	if !p.IsSetError1() {
		return DeleteSessionResult_Error1_DEFAULT
	}
	return p.Error1
}

var DeleteSessionResult_Error2_DEFAULT *BadRequest

func (p *DeleteSessionResult) GetError2() *BadRequest {
	if !p.IsSetError2() {
		return DeleteSessionResult_Error2_DEFAULT
	}
	return p.Error2
}

var DeleteSessionResult_Error3_DEFAULT *Forbidden

func (p *DeleteSessionResult) GetError3() *Forbidden {
	if !p.IsSetError3() {
		return DeleteSessionResult_Error3_DEFAULT
	}
	return p.Error3
}
func (p *DeleteSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteSessionResult) IsSetError1() bool {
	return p.Error1 != nil
}

func (p *DeleteSessionResult) IsSetError2() bool {
	return p.Error2 != nil
}

func (p *DeleteSessionResult) IsSetError3() bool {
	return p.Error3 != nil
}

func (p *DeleteSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteSessionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DeleteSessionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Error1 = &ServerError{}
	if err := p.Error1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error1, err)
	}
	return nil
}

func (p *DeleteSessionResult) ReadField2(iprot thrift.TProtocol) error {
	p.Error2 = &BadRequest{}
	if err := p.Error2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error2, err)
	}
	return nil
}

func (p *DeleteSessionResult) ReadField3(iprot thrift.TProtocol) error {
	p.Error3 = &Forbidden{}
	if err := p.Error3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error3, err)
	}
	return nil
}

func (p *DeleteSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteSession_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DeleteSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError1() {
		if err := oprot.WriteFieldBegin("error1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:error1: %s", p, err)
		}
		if err := p.Error1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:error1: %s", p, err)
		}
	}
	return err
}

func (p *DeleteSessionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetError2() {
		if err := oprot.WriteFieldBegin("error2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:error2: %s", p, err)
		}
		if err := p.Error2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:error2: %s", p, err)
		}
	}
	return err
}

func (p *DeleteSessionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetError3() {
		if err := oprot.WriteFieldBegin("error3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:error3: %s", p, err)
		}
		if err := p.Error3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:error3: %s", p, err)
		}
	}
	return err
}

func (p *DeleteSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSessionResult(%+v)", *p)
}
