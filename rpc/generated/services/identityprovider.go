// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package services

import (
	"bytes"
	"fmt"

	"git-wip-us.apache.org/repos/asf/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type IdentityProvider interface { //IdentityProvider service

	// Parameters:
	//  - Domain
	//  - Name
	//  - Password
	//  - UserAgent
	//  - RemoteAddr
	CreateSession(domain string, name string, password string, userAgent string, remoteAddr string) (r *Session, err error)
	// Parameters:
	//  - SessionID
	//  - UserAgent
	//  - RemoteAddr
	GetSession(sessionID string, userAgent string, remoteAddr string) (r *Session, err error)
	// Parameters:
	//  - SessionID
	//  - UserAgent
	//  - RemoteAddr
	CheckSession(sessionID string, userAgent string, remoteAddr string) (r bool, err error)
	// Parameters:
	//  - SessionID
	//  - UserAgent
	//  - RemoteAddr
	DeleteSession(sessionID string, userAgent string, remoteAddr string) (r bool, err error)
	// Parameters:
	//  - SessionID
	//  - RoleName
	AssertRole(sessionID string, roleName string) (r bool, err error)
	// Parameters:
	//  - SessionID
	//  - PermissioName
	AssertPermission(sessionID string, permissioName string) (r bool, err error)
}

//IdentityProvider service
type IdentityProviderClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewIdentityProviderClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IdentityProviderClient {
	return &IdentityProviderClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewIdentityProviderClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IdentityProviderClient {
	return &IdentityProviderClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Domain
//  - Name
//  - Password
//  - UserAgent
//  - RemoteAddr
func (p *IdentityProviderClient) CreateSession(domain string, name string, password string, userAgent string, remoteAddr string) (r *Session, err error) {
	if err = p.sendCreateSession(domain, name, password, userAgent, remoteAddr); err != nil {
		return
	}
	return p.recvCreateSession()
}

func (p *IdentityProviderClient) sendCreateSession(domain string, name string, password string, userAgent string, remoteAddr string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateSessionArgs{
		Domain:     domain,
		Name:       name,
		Password:   password,
		UserAgent:  userAgent,
		RemoteAddr: remoteAddr,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IdentityProviderClient) recvCreateSession() (value *Session, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createSession failed: out of sequence response")
		return
	}
	result := CreateSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error1 != nil {
		err = result.Error1
		return
	} else if result.Error2 != nil {
		err = result.Error2
		return
	} else if result.Error3 != nil {
		err = result.Error3
		return
	} else if result.Error4 != nil {
		err = result.Error4
		return
	} else if result.Error5 != nil {
		err = result.Error5
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionID
//  - UserAgent
//  - RemoteAddr
func (p *IdentityProviderClient) GetSession(sessionID string, userAgent string, remoteAddr string) (r *Session, err error) {
	if err = p.sendGetSession(sessionID, userAgent, remoteAddr); err != nil {
		return
	}
	return p.recvGetSession()
}

func (p *IdentityProviderClient) sendGetSession(sessionID string, userAgent string, remoteAddr string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetSessionArgs{
		SessionID:  sessionID,
		UserAgent:  userAgent,
		RemoteAddr: remoteAddr,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IdentityProviderClient) recvGetSession() (value *Session, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSession failed: out of sequence response")
		return
	}
	result := GetSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error1 != nil {
		err = result.Error1
		return
	} else if result.Error2 != nil {
		err = result.Error2
		return
	} else if result.Error3 != nil {
		err = result.Error3
		return
	} else if result.Error4 != nil {
		err = result.Error4
		return
	} else if result.Error5 != nil {
		err = result.Error5
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionID
//  - UserAgent
//  - RemoteAddr
func (p *IdentityProviderClient) CheckSession(sessionID string, userAgent string, remoteAddr string) (r bool, err error) {
	if err = p.sendCheckSession(sessionID, userAgent, remoteAddr); err != nil {
		return
	}
	return p.recvCheckSession()
}

func (p *IdentityProviderClient) sendCheckSession(sessionID string, userAgent string, remoteAddr string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("checkSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CheckSessionArgs{
		SessionID:  sessionID,
		UserAgent:  userAgent,
		RemoteAddr: remoteAddr,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IdentityProviderClient) recvCheckSession() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkSession failed: out of sequence response")
		return
	}
	result := CheckSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error1 != nil {
		err = result.Error1
		return
	} else if result.Error2 != nil {
		err = result.Error2
		return
	} else if result.Error3 != nil {
		err = result.Error3
		return
	} else if result.Error4 != nil {
		err = result.Error4
		return
	} else if result.Error5 != nil {
		err = result.Error5
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionID
//  - UserAgent
//  - RemoteAddr
func (p *IdentityProviderClient) DeleteSession(sessionID string, userAgent string, remoteAddr string) (r bool, err error) {
	if err = p.sendDeleteSession(sessionID, userAgent, remoteAddr); err != nil {
		return
	}
	return p.recvDeleteSession()
}

func (p *IdentityProviderClient) sendDeleteSession(sessionID string, userAgent string, remoteAddr string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteSessionArgs{
		SessionID:  sessionID,
		UserAgent:  userAgent,
		RemoteAddr: remoteAddr,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IdentityProviderClient) recvDeleteSession() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteSession failed: out of sequence response")
		return
	}
	result := DeleteSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error1 != nil {
		err = result.Error1
		return
	} else if result.Error2 != nil {
		err = result.Error2
		return
	} else if result.Error3 != nil {
		err = result.Error3
		return
	} else if result.Error4 != nil {
		err = result.Error4
		return
	} else if result.Error5 != nil {
		err = result.Error5
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionID
//  - RoleName
func (p *IdentityProviderClient) AssertRole(sessionID string, roleName string) (r bool, err error) {
	if err = p.sendAssertRole(sessionID, roleName); err != nil {
		return
	}
	return p.recvAssertRole()
}

func (p *IdentityProviderClient) sendAssertRole(sessionID string, roleName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("assertRole", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AssertRoleArgs{
		SessionID: sessionID,
		RoleName:  roleName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IdentityProviderClient) recvAssertRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "assertRole failed: out of sequence response")
		return
	}
	result := AssertRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error1 != nil {
		err = result.Error1
		return
	} else if result.Error2 != nil {
		err = result.Error2
		return
	} else if result.Error3 != nil {
		err = result.Error3
		return
	} else if result.Error4 != nil {
		err = result.Error4
		return
	} else if result.Error5 != nil {
		err = result.Error5
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionID
//  - PermissioName
func (p *IdentityProviderClient) AssertPermission(sessionID string, permissioName string) (r bool, err error) {
	if err = p.sendAssertPermission(sessionID, permissioName); err != nil {
		return
	}
	return p.recvAssertPermission()
}

func (p *IdentityProviderClient) sendAssertPermission(sessionID string, permissioName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("assertPermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AssertPermissionArgs{
		SessionID:     sessionID,
		PermissioName: permissioName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IdentityProviderClient) recvAssertPermission() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "assertPermission failed: out of sequence response")
		return
	}
	result := AssertPermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error1 != nil {
		err = result.Error1
		return
	} else if result.Error2 != nil {
		err = result.Error2
		return
	} else if result.Error3 != nil {
		err = result.Error3
		return
	} else if result.Error4 != nil {
		err = result.Error4
		return
	} else if result.Error5 != nil {
		err = result.Error5
		return
	}
	value = result.GetSuccess()
	return
}

type IdentityProviderProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      IdentityProvider
}

func (p *IdentityProviderProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *IdentityProviderProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *IdentityProviderProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewIdentityProviderProcessor(handler IdentityProvider) *IdentityProviderProcessor {

	self12 := &IdentityProviderProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self12.processorMap["createSession"] = &identityProviderProcessorCreateSession{handler: handler}
	self12.processorMap["getSession"] = &identityProviderProcessorGetSession{handler: handler}
	self12.processorMap["checkSession"] = &identityProviderProcessorCheckSession{handler: handler}
	self12.processorMap["deleteSession"] = &identityProviderProcessorDeleteSession{handler: handler}
	self12.processorMap["assertRole"] = &identityProviderProcessorAssertRole{handler: handler}
	self12.processorMap["assertPermission"] = &identityProviderProcessorAssertPermission{handler: handler}
	return self12
}

func (p *IdentityProviderProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x13.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x13

}

type identityProviderProcessorCreateSession struct {
	handler IdentityProvider
}

func (p *identityProviderProcessorCreateSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateSessionResult{}
	var retval *Session
	var err2 error
	if retval, err2 = p.handler.CreateSession(args.Domain, args.Name, args.Password, args.UserAgent, args.RemoteAddr); err2 != nil {
		switch v := err2.(type) {
		case *ServerError:
			result.Error1 = v
		case *BadRequestError:
			result.Error2 = v
		case *UnauthorizedError:
			result.Error3 = v
		case *ForbiddenError:
			result.Error4 = v
		case *NotFoundError:
			result.Error5 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSession: "+err2.Error())
			oprot.WriteMessageBegin("createSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type identityProviderProcessorGetSession struct {
	handler IdentityProvider
}

func (p *identityProviderProcessorGetSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetSessionResult{}
	var retval *Session
	var err2 error
	if retval, err2 = p.handler.GetSession(args.SessionID, args.UserAgent, args.RemoteAddr); err2 != nil {
		switch v := err2.(type) {
		case *ServerError:
			result.Error1 = v
		case *BadRequestError:
			result.Error2 = v
		case *UnauthorizedError:
			result.Error3 = v
		case *ForbiddenError:
			result.Error4 = v
		case *NotFoundError:
			result.Error5 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSession: "+err2.Error())
			oprot.WriteMessageBegin("getSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type identityProviderProcessorCheckSession struct {
	handler IdentityProvider
}

func (p *identityProviderProcessorCheckSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CheckSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CheckSessionResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.CheckSession(args.SessionID, args.UserAgent, args.RemoteAddr); err2 != nil {
		switch v := err2.(type) {
		case *ServerError:
			result.Error1 = v
		case *BadRequestError:
			result.Error2 = v
		case *UnauthorizedError:
			result.Error3 = v
		case *ForbiddenError:
			result.Error4 = v
		case *NotFoundError:
			result.Error5 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkSession: "+err2.Error())
			oprot.WriteMessageBegin("checkSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("checkSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type identityProviderProcessorDeleteSession struct {
	handler IdentityProvider
}

func (p *identityProviderProcessorDeleteSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteSessionResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DeleteSession(args.SessionID, args.UserAgent, args.RemoteAddr); err2 != nil {
		switch v := err2.(type) {
		case *ServerError:
			result.Error1 = v
		case *BadRequestError:
			result.Error2 = v
		case *UnauthorizedError:
			result.Error3 = v
		case *ForbiddenError:
			result.Error4 = v
		case *NotFoundError:
			result.Error5 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteSession: "+err2.Error())
			oprot.WriteMessageBegin("deleteSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("deleteSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type identityProviderProcessorAssertRole struct {
	handler IdentityProvider
}

func (p *identityProviderProcessorAssertRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AssertRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("assertRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AssertRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.AssertRole(args.SessionID, args.RoleName); err2 != nil {
		switch v := err2.(type) {
		case *ServerError:
			result.Error1 = v
		case *BadRequestError:
			result.Error2 = v
		case *UnauthorizedError:
			result.Error3 = v
		case *ForbiddenError:
			result.Error4 = v
		case *NotFoundError:
			result.Error5 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing assertRole: "+err2.Error())
			oprot.WriteMessageBegin("assertRole", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("assertRole", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type identityProviderProcessorAssertPermission struct {
	handler IdentityProvider
}

func (p *identityProviderProcessorAssertPermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AssertPermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("assertPermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AssertPermissionResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.AssertPermission(args.SessionID, args.PermissioName); err2 != nil {
		switch v := err2.(type) {
		case *ServerError:
			result.Error1 = v
		case *BadRequestError:
			result.Error2 = v
		case *UnauthorizedError:
			result.Error3 = v
		case *ForbiddenError:
			result.Error4 = v
		case *NotFoundError:
			result.Error5 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing assertPermission: "+err2.Error())
			oprot.WriteMessageBegin("assertPermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("assertPermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type CreateSessionArgs struct {
	Domain     string `thrift:"domain,1" json:"domain"`
	Name       string `thrift:"name,2" json:"name"`
	Password   string `thrift:"password,3" json:"password"`
	UserAgent  string `thrift:"userAgent,4" json:"userAgent"`
	RemoteAddr string `thrift:"remoteAddr,5" json:"remoteAddr"`
}

func NewCreateSessionArgs() *CreateSessionArgs {
	return &CreateSessionArgs{}
}

func (p *CreateSessionArgs) GetDomain() string {
	return p.Domain
}

func (p *CreateSessionArgs) GetName() string {
	return p.Name
}

func (p *CreateSessionArgs) GetPassword() string {
	return p.Password
}

func (p *CreateSessionArgs) GetUserAgent() string {
	return p.UserAgent
}

func (p *CreateSessionArgs) GetRemoteAddr() string {
	return p.RemoteAddr
}
func (p *CreateSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateSessionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *CreateSessionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateSessionArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *CreateSessionArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UserAgent = v
	}
	return nil
}

func (p *CreateSessionArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.RemoteAddr = v
	}
	return nil
}

func (p *CreateSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSession_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("domain", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:domain: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Domain)); err != nil {
		return fmt.Errorf("%T.domain (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:domain: %s", p, err)
	}
	return err
}

func (p *CreateSessionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:name: %s", p, err)
	}
	return err
}

func (p *CreateSessionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:password: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return fmt.Errorf("%T.password (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:password: %s", p, err)
	}
	return err
}

func (p *CreateSessionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userAgent", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:userAgent: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserAgent)); err != nil {
		return fmt.Errorf("%T.userAgent (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:userAgent: %s", p, err)
	}
	return err
}

func (p *CreateSessionArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("remoteAddr", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:remoteAddr: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RemoteAddr)); err != nil {
		return fmt.Errorf("%T.remoteAddr (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:remoteAddr: %s", p, err)
	}
	return err
}

func (p *CreateSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSessionArgs(%+v)", *p)
}

type CreateSessionResult struct {
	Success *Session           `thrift:"success,0" json:"success"`
	Error1  *ServerError       `thrift:"error1,1" json:"error1"`
	Error2  *BadRequestError   `thrift:"error2,2" json:"error2"`
	Error3  *UnauthorizedError `thrift:"error3,3" json:"error3"`
	Error4  *ForbiddenError    `thrift:"error4,4" json:"error4"`
	Error5  *NotFoundError     `thrift:"error5,5" json:"error5"`
}

func NewCreateSessionResult() *CreateSessionResult {
	return &CreateSessionResult{}
}

var CreateSessionResult_Success_DEFAULT *Session

func (p *CreateSessionResult) GetSuccess() *Session {
	if !p.IsSetSuccess() {
		return CreateSessionResult_Success_DEFAULT
	}
	return p.Success
}

var CreateSessionResult_Error1_DEFAULT *ServerError

func (p *CreateSessionResult) GetError1() *ServerError {
	if !p.IsSetError1() {
		return CreateSessionResult_Error1_DEFAULT
	}
	return p.Error1
}

var CreateSessionResult_Error2_DEFAULT *BadRequestError

func (p *CreateSessionResult) GetError2() *BadRequestError {
	if !p.IsSetError2() {
		return CreateSessionResult_Error2_DEFAULT
	}
	return p.Error2
}

var CreateSessionResult_Error3_DEFAULT *UnauthorizedError

func (p *CreateSessionResult) GetError3() *UnauthorizedError {
	if !p.IsSetError3() {
		return CreateSessionResult_Error3_DEFAULT
	}
	return p.Error3
}

var CreateSessionResult_Error4_DEFAULT *ForbiddenError

func (p *CreateSessionResult) GetError4() *ForbiddenError {
	if !p.IsSetError4() {
		return CreateSessionResult_Error4_DEFAULT
	}
	return p.Error4
}

var CreateSessionResult_Error5_DEFAULT *NotFoundError

func (p *CreateSessionResult) GetError5() *NotFoundError {
	if !p.IsSetError5() {
		return CreateSessionResult_Error5_DEFAULT
	}
	return p.Error5
}
func (p *CreateSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateSessionResult) IsSetError1() bool {
	return p.Error1 != nil
}

func (p *CreateSessionResult) IsSetError2() bool {
	return p.Error2 != nil
}

func (p *CreateSessionResult) IsSetError3() bool {
	return p.Error3 != nil
}

func (p *CreateSessionResult) IsSetError4() bool {
	return p.Error4 != nil
}

func (p *CreateSessionResult) IsSetError5() bool {
	return p.Error5 != nil
}

func (p *CreateSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateSessionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Session{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateSessionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Error1 = &ServerError{}
	if err := p.Error1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error1, err)
	}
	return nil
}

func (p *CreateSessionResult) ReadField2(iprot thrift.TProtocol) error {
	p.Error2 = &BadRequestError{}
	if err := p.Error2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error2, err)
	}
	return nil
}

func (p *CreateSessionResult) ReadField3(iprot thrift.TProtocol) error {
	p.Error3 = &UnauthorizedError{}
	if err := p.Error3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error3, err)
	}
	return nil
}

func (p *CreateSessionResult) ReadField4(iprot thrift.TProtocol) error {
	p.Error4 = &ForbiddenError{}
	if err := p.Error4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error4, err)
	}
	return nil
}

func (p *CreateSessionResult) ReadField5(iprot thrift.TProtocol) error {
	p.Error5 = &NotFoundError{}
	if err := p.Error5.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error5, err)
	}
	return nil
}

func (p *CreateSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSession_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError1() {
		if err := oprot.WriteFieldBegin("error1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:error1: %s", p, err)
		}
		if err := p.Error1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:error1: %s", p, err)
		}
	}
	return err
}

func (p *CreateSessionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetError2() {
		if err := oprot.WriteFieldBegin("error2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:error2: %s", p, err)
		}
		if err := p.Error2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:error2: %s", p, err)
		}
	}
	return err
}

func (p *CreateSessionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetError3() {
		if err := oprot.WriteFieldBegin("error3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:error3: %s", p, err)
		}
		if err := p.Error3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:error3: %s", p, err)
		}
	}
	return err
}

func (p *CreateSessionResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetError4() {
		if err := oprot.WriteFieldBegin("error4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:error4: %s", p, err)
		}
		if err := p.Error4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:error4: %s", p, err)
		}
	}
	return err
}

func (p *CreateSessionResult) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetError5() {
		if err := oprot.WriteFieldBegin("error5", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:error5: %s", p, err)
		}
		if err := p.Error5.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error5, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:error5: %s", p, err)
		}
	}
	return err
}

func (p *CreateSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSessionResult(%+v)", *p)
}

type GetSessionArgs struct {
	SessionID  string `thrift:"sessionID,1" json:"sessionID"`
	UserAgent  string `thrift:"userAgent,2" json:"userAgent"`
	RemoteAddr string `thrift:"remoteAddr,3" json:"remoteAddr"`
}

func NewGetSessionArgs() *GetSessionArgs {
	return &GetSessionArgs{}
}

func (p *GetSessionArgs) GetSessionID() string {
	return p.SessionID
}

func (p *GetSessionArgs) GetUserAgent() string {
	return p.UserAgent
}

func (p *GetSessionArgs) GetRemoteAddr() string {
	return p.RemoteAddr
}
func (p *GetSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSessionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionID = v
	}
	return nil
}

func (p *GetSessionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserAgent = v
	}
	return nil
}

func (p *GetSessionArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.RemoteAddr = v
	}
	return nil
}

func (p *GetSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSession_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sessionID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionID)); err != nil {
		return fmt.Errorf("%T.sessionID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sessionID: %s", p, err)
	}
	return err
}

func (p *GetSessionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userAgent", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userAgent: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserAgent)); err != nil {
		return fmt.Errorf("%T.userAgent (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userAgent: %s", p, err)
	}
	return err
}

func (p *GetSessionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("remoteAddr", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:remoteAddr: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RemoteAddr)); err != nil {
		return fmt.Errorf("%T.remoteAddr (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:remoteAddr: %s", p, err)
	}
	return err
}

func (p *GetSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSessionArgs(%+v)", *p)
}

type GetSessionResult struct {
	Success *Session           `thrift:"success,0" json:"success"`
	Error1  *ServerError       `thrift:"error1,1" json:"error1"`
	Error2  *BadRequestError   `thrift:"error2,2" json:"error2"`
	Error3  *UnauthorizedError `thrift:"error3,3" json:"error3"`
	Error4  *ForbiddenError    `thrift:"error4,4" json:"error4"`
	Error5  *NotFoundError     `thrift:"error5,5" json:"error5"`
}

func NewGetSessionResult() *GetSessionResult {
	return &GetSessionResult{}
}

var GetSessionResult_Success_DEFAULT *Session

func (p *GetSessionResult) GetSuccess() *Session {
	if !p.IsSetSuccess() {
		return GetSessionResult_Success_DEFAULT
	}
	return p.Success
}

var GetSessionResult_Error1_DEFAULT *ServerError

func (p *GetSessionResult) GetError1() *ServerError {
	if !p.IsSetError1() {
		return GetSessionResult_Error1_DEFAULT
	}
	return p.Error1
}

var GetSessionResult_Error2_DEFAULT *BadRequestError

func (p *GetSessionResult) GetError2() *BadRequestError {
	if !p.IsSetError2() {
		return GetSessionResult_Error2_DEFAULT
	}
	return p.Error2
}

var GetSessionResult_Error3_DEFAULT *UnauthorizedError

func (p *GetSessionResult) GetError3() *UnauthorizedError {
	if !p.IsSetError3() {
		return GetSessionResult_Error3_DEFAULT
	}
	return p.Error3
}

var GetSessionResult_Error4_DEFAULT *ForbiddenError

func (p *GetSessionResult) GetError4() *ForbiddenError {
	if !p.IsSetError4() {
		return GetSessionResult_Error4_DEFAULT
	}
	return p.Error4
}

var GetSessionResult_Error5_DEFAULT *NotFoundError

func (p *GetSessionResult) GetError5() *NotFoundError {
	if !p.IsSetError5() {
		return GetSessionResult_Error5_DEFAULT
	}
	return p.Error5
}
func (p *GetSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSessionResult) IsSetError1() bool {
	return p.Error1 != nil
}

func (p *GetSessionResult) IsSetError2() bool {
	return p.Error2 != nil
}

func (p *GetSessionResult) IsSetError3() bool {
	return p.Error3 != nil
}

func (p *GetSessionResult) IsSetError4() bool {
	return p.Error4 != nil
}

func (p *GetSessionResult) IsSetError5() bool {
	return p.Error5 != nil
}

func (p *GetSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSessionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Session{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetSessionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Error1 = &ServerError{}
	if err := p.Error1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error1, err)
	}
	return nil
}

func (p *GetSessionResult) ReadField2(iprot thrift.TProtocol) error {
	p.Error2 = &BadRequestError{}
	if err := p.Error2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error2, err)
	}
	return nil
}

func (p *GetSessionResult) ReadField3(iprot thrift.TProtocol) error {
	p.Error3 = &UnauthorizedError{}
	if err := p.Error3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error3, err)
	}
	return nil
}

func (p *GetSessionResult) ReadField4(iprot thrift.TProtocol) error {
	p.Error4 = &ForbiddenError{}
	if err := p.Error4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error4, err)
	}
	return nil
}

func (p *GetSessionResult) ReadField5(iprot thrift.TProtocol) error {
	p.Error5 = &NotFoundError{}
	if err := p.Error5.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error5, err)
	}
	return nil
}

func (p *GetSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSession_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError1() {
		if err := oprot.WriteFieldBegin("error1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:error1: %s", p, err)
		}
		if err := p.Error1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:error1: %s", p, err)
		}
	}
	return err
}

func (p *GetSessionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetError2() {
		if err := oprot.WriteFieldBegin("error2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:error2: %s", p, err)
		}
		if err := p.Error2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:error2: %s", p, err)
		}
	}
	return err
}

func (p *GetSessionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetError3() {
		if err := oprot.WriteFieldBegin("error3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:error3: %s", p, err)
		}
		if err := p.Error3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:error3: %s", p, err)
		}
	}
	return err
}

func (p *GetSessionResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetError4() {
		if err := oprot.WriteFieldBegin("error4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:error4: %s", p, err)
		}
		if err := p.Error4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:error4: %s", p, err)
		}
	}
	return err
}

func (p *GetSessionResult) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetError5() {
		if err := oprot.WriteFieldBegin("error5", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:error5: %s", p, err)
		}
		if err := p.Error5.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error5, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:error5: %s", p, err)
		}
	}
	return err
}

func (p *GetSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSessionResult(%+v)", *p)
}

type CheckSessionArgs struct {
	SessionID  string `thrift:"sessionID,1" json:"sessionID"`
	UserAgent  string `thrift:"userAgent,2" json:"userAgent"`
	RemoteAddr string `thrift:"remoteAddr,3" json:"remoteAddr"`
}

func NewCheckSessionArgs() *CheckSessionArgs {
	return &CheckSessionArgs{}
}

func (p *CheckSessionArgs) GetSessionID() string {
	return p.SessionID
}

func (p *CheckSessionArgs) GetUserAgent() string {
	return p.UserAgent
}

func (p *CheckSessionArgs) GetRemoteAddr() string {
	return p.RemoteAddr
}
func (p *CheckSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckSessionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionID = v
	}
	return nil
}

func (p *CheckSessionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserAgent = v
	}
	return nil
}

func (p *CheckSessionArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.RemoteAddr = v
	}
	return nil
}

func (p *CheckSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkSession_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sessionID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionID)); err != nil {
		return fmt.Errorf("%T.sessionID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sessionID: %s", p, err)
	}
	return err
}

func (p *CheckSessionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userAgent", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userAgent: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserAgent)); err != nil {
		return fmt.Errorf("%T.userAgent (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userAgent: %s", p, err)
	}
	return err
}

func (p *CheckSessionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("remoteAddr", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:remoteAddr: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RemoteAddr)); err != nil {
		return fmt.Errorf("%T.remoteAddr (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:remoteAddr: %s", p, err)
	}
	return err
}

func (p *CheckSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckSessionArgs(%+v)", *p)
}

type CheckSessionResult struct {
	Success *bool              `thrift:"success,0" json:"success"`
	Error1  *ServerError       `thrift:"error1,1" json:"error1"`
	Error2  *BadRequestError   `thrift:"error2,2" json:"error2"`
	Error3  *UnauthorizedError `thrift:"error3,3" json:"error3"`
	Error4  *ForbiddenError    `thrift:"error4,4" json:"error4"`
	Error5  *NotFoundError     `thrift:"error5,5" json:"error5"`
}

func NewCheckSessionResult() *CheckSessionResult {
	return &CheckSessionResult{}
}

var CheckSessionResult_Success_DEFAULT bool

func (p *CheckSessionResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return CheckSessionResult_Success_DEFAULT
	}
	return *p.Success
}

var CheckSessionResult_Error1_DEFAULT *ServerError

func (p *CheckSessionResult) GetError1() *ServerError {
	if !p.IsSetError1() {
		return CheckSessionResult_Error1_DEFAULT
	}
	return p.Error1
}

var CheckSessionResult_Error2_DEFAULT *BadRequestError

func (p *CheckSessionResult) GetError2() *BadRequestError {
	if !p.IsSetError2() {
		return CheckSessionResult_Error2_DEFAULT
	}
	return p.Error2
}

var CheckSessionResult_Error3_DEFAULT *UnauthorizedError

func (p *CheckSessionResult) GetError3() *UnauthorizedError {
	if !p.IsSetError3() {
		return CheckSessionResult_Error3_DEFAULT
	}
	return p.Error3
}

var CheckSessionResult_Error4_DEFAULT *ForbiddenError

func (p *CheckSessionResult) GetError4() *ForbiddenError {
	if !p.IsSetError4() {
		return CheckSessionResult_Error4_DEFAULT
	}
	return p.Error4
}

var CheckSessionResult_Error5_DEFAULT *NotFoundError

func (p *CheckSessionResult) GetError5() *NotFoundError {
	if !p.IsSetError5() {
		return CheckSessionResult_Error5_DEFAULT
	}
	return p.Error5
}
func (p *CheckSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckSessionResult) IsSetError1() bool {
	return p.Error1 != nil
}

func (p *CheckSessionResult) IsSetError2() bool {
	return p.Error2 != nil
}

func (p *CheckSessionResult) IsSetError3() bool {
	return p.Error3 != nil
}

func (p *CheckSessionResult) IsSetError4() bool {
	return p.Error4 != nil
}

func (p *CheckSessionResult) IsSetError5() bool {
	return p.Error5 != nil
}

func (p *CheckSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckSessionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *CheckSessionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Error1 = &ServerError{}
	if err := p.Error1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error1, err)
	}
	return nil
}

func (p *CheckSessionResult) ReadField2(iprot thrift.TProtocol) error {
	p.Error2 = &BadRequestError{}
	if err := p.Error2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error2, err)
	}
	return nil
}

func (p *CheckSessionResult) ReadField3(iprot thrift.TProtocol) error {
	p.Error3 = &UnauthorizedError{}
	if err := p.Error3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error3, err)
	}
	return nil
}

func (p *CheckSessionResult) ReadField4(iprot thrift.TProtocol) error {
	p.Error4 = &ForbiddenError{}
	if err := p.Error4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error4, err)
	}
	return nil
}

func (p *CheckSessionResult) ReadField5(iprot thrift.TProtocol) error {
	p.Error5 = &NotFoundError{}
	if err := p.Error5.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error5, err)
	}
	return nil
}

func (p *CheckSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkSession_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CheckSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError1() {
		if err := oprot.WriteFieldBegin("error1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:error1: %s", p, err)
		}
		if err := p.Error1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:error1: %s", p, err)
		}
	}
	return err
}

func (p *CheckSessionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetError2() {
		if err := oprot.WriteFieldBegin("error2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:error2: %s", p, err)
		}
		if err := p.Error2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:error2: %s", p, err)
		}
	}
	return err
}

func (p *CheckSessionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetError3() {
		if err := oprot.WriteFieldBegin("error3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:error3: %s", p, err)
		}
		if err := p.Error3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:error3: %s", p, err)
		}
	}
	return err
}

func (p *CheckSessionResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetError4() {
		if err := oprot.WriteFieldBegin("error4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:error4: %s", p, err)
		}
		if err := p.Error4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:error4: %s", p, err)
		}
	}
	return err
}

func (p *CheckSessionResult) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetError5() {
		if err := oprot.WriteFieldBegin("error5", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:error5: %s", p, err)
		}
		if err := p.Error5.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error5, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:error5: %s", p, err)
		}
	}
	return err
}

func (p *CheckSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckSessionResult(%+v)", *p)
}

type DeleteSessionArgs struct {
	SessionID  string `thrift:"sessionID,1" json:"sessionID"`
	UserAgent  string `thrift:"userAgent,2" json:"userAgent"`
	RemoteAddr string `thrift:"remoteAddr,3" json:"remoteAddr"`
}

func NewDeleteSessionArgs() *DeleteSessionArgs {
	return &DeleteSessionArgs{}
}

func (p *DeleteSessionArgs) GetSessionID() string {
	return p.SessionID
}

func (p *DeleteSessionArgs) GetUserAgent() string {
	return p.UserAgent
}

func (p *DeleteSessionArgs) GetRemoteAddr() string {
	return p.RemoteAddr
}
func (p *DeleteSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteSessionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionID = v
	}
	return nil
}

func (p *DeleteSessionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserAgent = v
	}
	return nil
}

func (p *DeleteSessionArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.RemoteAddr = v
	}
	return nil
}

func (p *DeleteSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteSession_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sessionID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionID)); err != nil {
		return fmt.Errorf("%T.sessionID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sessionID: %s", p, err)
	}
	return err
}

func (p *DeleteSessionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userAgent", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userAgent: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserAgent)); err != nil {
		return fmt.Errorf("%T.userAgent (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userAgent: %s", p, err)
	}
	return err
}

func (p *DeleteSessionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("remoteAddr", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:remoteAddr: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RemoteAddr)); err != nil {
		return fmt.Errorf("%T.remoteAddr (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:remoteAddr: %s", p, err)
	}
	return err
}

func (p *DeleteSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSessionArgs(%+v)", *p)
}

type DeleteSessionResult struct {
	Success *bool              `thrift:"success,0" json:"success"`
	Error1  *ServerError       `thrift:"error1,1" json:"error1"`
	Error2  *BadRequestError   `thrift:"error2,2" json:"error2"`
	Error3  *UnauthorizedError `thrift:"error3,3" json:"error3"`
	Error4  *ForbiddenError    `thrift:"error4,4" json:"error4"`
	Error5  *NotFoundError     `thrift:"error5,5" json:"error5"`
}

func NewDeleteSessionResult() *DeleteSessionResult {
	return &DeleteSessionResult{}
}

var DeleteSessionResult_Success_DEFAULT bool

func (p *DeleteSessionResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DeleteSessionResult_Success_DEFAULT
	}
	return *p.Success
}

var DeleteSessionResult_Error1_DEFAULT *ServerError

func (p *DeleteSessionResult) GetError1() *ServerError {
	if !p.IsSetError1() {
		return DeleteSessionResult_Error1_DEFAULT
	}
	return p.Error1
}

var DeleteSessionResult_Error2_DEFAULT *BadRequestError

func (p *DeleteSessionResult) GetError2() *BadRequestError {
	if !p.IsSetError2() {
		return DeleteSessionResult_Error2_DEFAULT
	}
	return p.Error2
}

var DeleteSessionResult_Error3_DEFAULT *UnauthorizedError

func (p *DeleteSessionResult) GetError3() *UnauthorizedError {
	if !p.IsSetError3() {
		return DeleteSessionResult_Error3_DEFAULT
	}
	return p.Error3
}

var DeleteSessionResult_Error4_DEFAULT *ForbiddenError

func (p *DeleteSessionResult) GetError4() *ForbiddenError {
	if !p.IsSetError4() {
		return DeleteSessionResult_Error4_DEFAULT
	}
	return p.Error4
}

var DeleteSessionResult_Error5_DEFAULT *NotFoundError

func (p *DeleteSessionResult) GetError5() *NotFoundError {
	if !p.IsSetError5() {
		return DeleteSessionResult_Error5_DEFAULT
	}
	return p.Error5
}
func (p *DeleteSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteSessionResult) IsSetError1() bool {
	return p.Error1 != nil
}

func (p *DeleteSessionResult) IsSetError2() bool {
	return p.Error2 != nil
}

func (p *DeleteSessionResult) IsSetError3() bool {
	return p.Error3 != nil
}

func (p *DeleteSessionResult) IsSetError4() bool {
	return p.Error4 != nil
}

func (p *DeleteSessionResult) IsSetError5() bool {
	return p.Error5 != nil
}

func (p *DeleteSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteSessionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DeleteSessionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Error1 = &ServerError{}
	if err := p.Error1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error1, err)
	}
	return nil
}

func (p *DeleteSessionResult) ReadField2(iprot thrift.TProtocol) error {
	p.Error2 = &BadRequestError{}
	if err := p.Error2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error2, err)
	}
	return nil
}

func (p *DeleteSessionResult) ReadField3(iprot thrift.TProtocol) error {
	p.Error3 = &UnauthorizedError{}
	if err := p.Error3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error3, err)
	}
	return nil
}

func (p *DeleteSessionResult) ReadField4(iprot thrift.TProtocol) error {
	p.Error4 = &ForbiddenError{}
	if err := p.Error4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error4, err)
	}
	return nil
}

func (p *DeleteSessionResult) ReadField5(iprot thrift.TProtocol) error {
	p.Error5 = &NotFoundError{}
	if err := p.Error5.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error5, err)
	}
	return nil
}

func (p *DeleteSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteSession_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DeleteSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError1() {
		if err := oprot.WriteFieldBegin("error1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:error1: %s", p, err)
		}
		if err := p.Error1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:error1: %s", p, err)
		}
	}
	return err
}

func (p *DeleteSessionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetError2() {
		if err := oprot.WriteFieldBegin("error2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:error2: %s", p, err)
		}
		if err := p.Error2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:error2: %s", p, err)
		}
	}
	return err
}

func (p *DeleteSessionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetError3() {
		if err := oprot.WriteFieldBegin("error3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:error3: %s", p, err)
		}
		if err := p.Error3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:error3: %s", p, err)
		}
	}
	return err
}

func (p *DeleteSessionResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetError4() {
		if err := oprot.WriteFieldBegin("error4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:error4: %s", p, err)
		}
		if err := p.Error4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:error4: %s", p, err)
		}
	}
	return err
}

func (p *DeleteSessionResult) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetError5() {
		if err := oprot.WriteFieldBegin("error5", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:error5: %s", p, err)
		}
		if err := p.Error5.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error5, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:error5: %s", p, err)
		}
	}
	return err
}

func (p *DeleteSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSessionResult(%+v)", *p)
}

type AssertRoleArgs struct {
	SessionID string `thrift:"sessionID,1" json:"sessionID"`
	RoleName  string `thrift:"roleName,2" json:"roleName"`
}

func NewAssertRoleArgs() *AssertRoleArgs {
	return &AssertRoleArgs{}
}

func (p *AssertRoleArgs) GetSessionID() string {
	return p.SessionID
}

func (p *AssertRoleArgs) GetRoleName() string {
	return p.RoleName
}
func (p *AssertRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AssertRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionID = v
	}
	return nil
}

func (p *AssertRoleArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *AssertRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("assertRole_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AssertRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sessionID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionID)); err != nil {
		return fmt.Errorf("%T.sessionID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sessionID: %s", p, err)
	}
	return err
}

func (p *AssertRoleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:roleName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.roleName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:roleName: %s", p, err)
	}
	return err
}

func (p *AssertRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AssertRoleArgs(%+v)", *p)
}

type AssertRoleResult struct {
	Success *bool              `thrift:"success,0" json:"success"`
	Error1  *ServerError       `thrift:"error1,1" json:"error1"`
	Error2  *BadRequestError   `thrift:"error2,2" json:"error2"`
	Error3  *UnauthorizedError `thrift:"error3,3" json:"error3"`
	Error4  *ForbiddenError    `thrift:"error4,4" json:"error4"`
	Error5  *NotFoundError     `thrift:"error5,5" json:"error5"`
}

func NewAssertRoleResult() *AssertRoleResult {
	return &AssertRoleResult{}
}

var AssertRoleResult_Success_DEFAULT bool

func (p *AssertRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return AssertRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var AssertRoleResult_Error1_DEFAULT *ServerError

func (p *AssertRoleResult) GetError1() *ServerError {
	if !p.IsSetError1() {
		return AssertRoleResult_Error1_DEFAULT
	}
	return p.Error1
}

var AssertRoleResult_Error2_DEFAULT *BadRequestError

func (p *AssertRoleResult) GetError2() *BadRequestError {
	if !p.IsSetError2() {
		return AssertRoleResult_Error2_DEFAULT
	}
	return p.Error2
}

var AssertRoleResult_Error3_DEFAULT *UnauthorizedError

func (p *AssertRoleResult) GetError3() *UnauthorizedError {
	if !p.IsSetError3() {
		return AssertRoleResult_Error3_DEFAULT
	}
	return p.Error3
}

var AssertRoleResult_Error4_DEFAULT *ForbiddenError

func (p *AssertRoleResult) GetError4() *ForbiddenError {
	if !p.IsSetError4() {
		return AssertRoleResult_Error4_DEFAULT
	}
	return p.Error4
}

var AssertRoleResult_Error5_DEFAULT *NotFoundError

func (p *AssertRoleResult) GetError5() *NotFoundError {
	if !p.IsSetError5() {
		return AssertRoleResult_Error5_DEFAULT
	}
	return p.Error5
}
func (p *AssertRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AssertRoleResult) IsSetError1() bool {
	return p.Error1 != nil
}

func (p *AssertRoleResult) IsSetError2() bool {
	return p.Error2 != nil
}

func (p *AssertRoleResult) IsSetError3() bool {
	return p.Error3 != nil
}

func (p *AssertRoleResult) IsSetError4() bool {
	return p.Error4 != nil
}

func (p *AssertRoleResult) IsSetError5() bool {
	return p.Error5 != nil
}

func (p *AssertRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AssertRoleResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AssertRoleResult) ReadField1(iprot thrift.TProtocol) error {
	p.Error1 = &ServerError{}
	if err := p.Error1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error1, err)
	}
	return nil
}

func (p *AssertRoleResult) ReadField2(iprot thrift.TProtocol) error {
	p.Error2 = &BadRequestError{}
	if err := p.Error2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error2, err)
	}
	return nil
}

func (p *AssertRoleResult) ReadField3(iprot thrift.TProtocol) error {
	p.Error3 = &UnauthorizedError{}
	if err := p.Error3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error3, err)
	}
	return nil
}

func (p *AssertRoleResult) ReadField4(iprot thrift.TProtocol) error {
	p.Error4 = &ForbiddenError{}
	if err := p.Error4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error4, err)
	}
	return nil
}

func (p *AssertRoleResult) ReadField5(iprot thrift.TProtocol) error {
	p.Error5 = &NotFoundError{}
	if err := p.Error5.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error5, err)
	}
	return nil
}

func (p *AssertRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("assertRole_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AssertRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AssertRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError1() {
		if err := oprot.WriteFieldBegin("error1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:error1: %s", p, err)
		}
		if err := p.Error1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:error1: %s", p, err)
		}
	}
	return err
}

func (p *AssertRoleResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetError2() {
		if err := oprot.WriteFieldBegin("error2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:error2: %s", p, err)
		}
		if err := p.Error2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:error2: %s", p, err)
		}
	}
	return err
}

func (p *AssertRoleResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetError3() {
		if err := oprot.WriteFieldBegin("error3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:error3: %s", p, err)
		}
		if err := p.Error3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:error3: %s", p, err)
		}
	}
	return err
}

func (p *AssertRoleResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetError4() {
		if err := oprot.WriteFieldBegin("error4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:error4: %s", p, err)
		}
		if err := p.Error4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:error4: %s", p, err)
		}
	}
	return err
}

func (p *AssertRoleResult) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetError5() {
		if err := oprot.WriteFieldBegin("error5", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:error5: %s", p, err)
		}
		if err := p.Error5.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error5, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:error5: %s", p, err)
		}
	}
	return err
}

func (p *AssertRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AssertRoleResult(%+v)", *p)
}

type AssertPermissionArgs struct {
	SessionID     string `thrift:"sessionID,1" json:"sessionID"`
	PermissioName string `thrift:"permissioName,2" json:"permissioName"`
}

func NewAssertPermissionArgs() *AssertPermissionArgs {
	return &AssertPermissionArgs{}
}

func (p *AssertPermissionArgs) GetSessionID() string {
	return p.SessionID
}

func (p *AssertPermissionArgs) GetPermissioName() string {
	return p.PermissioName
}
func (p *AssertPermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AssertPermissionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionID = v
	}
	return nil
}

func (p *AssertPermissionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PermissioName = v
	}
	return nil
}

func (p *AssertPermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("assertPermission_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AssertPermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sessionID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionID)); err != nil {
		return fmt.Errorf("%T.sessionID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sessionID: %s", p, err)
	}
	return err
}

func (p *AssertPermissionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permissioName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:permissioName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PermissioName)); err != nil {
		return fmt.Errorf("%T.permissioName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:permissioName: %s", p, err)
	}
	return err
}

func (p *AssertPermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AssertPermissionArgs(%+v)", *p)
}

type AssertPermissionResult struct {
	Success *bool              `thrift:"success,0" json:"success"`
	Error1  *ServerError       `thrift:"error1,1" json:"error1"`
	Error2  *BadRequestError   `thrift:"error2,2" json:"error2"`
	Error3  *UnauthorizedError `thrift:"error3,3" json:"error3"`
	Error4  *ForbiddenError    `thrift:"error4,4" json:"error4"`
	Error5  *NotFoundError     `thrift:"error5,5" json:"error5"`
}

func NewAssertPermissionResult() *AssertPermissionResult {
	return &AssertPermissionResult{}
}

var AssertPermissionResult_Success_DEFAULT bool

func (p *AssertPermissionResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return AssertPermissionResult_Success_DEFAULT
	}
	return *p.Success
}

var AssertPermissionResult_Error1_DEFAULT *ServerError

func (p *AssertPermissionResult) GetError1() *ServerError {
	if !p.IsSetError1() {
		return AssertPermissionResult_Error1_DEFAULT
	}
	return p.Error1
}

var AssertPermissionResult_Error2_DEFAULT *BadRequestError

func (p *AssertPermissionResult) GetError2() *BadRequestError {
	if !p.IsSetError2() {
		return AssertPermissionResult_Error2_DEFAULT
	}
	return p.Error2
}

var AssertPermissionResult_Error3_DEFAULT *UnauthorizedError

func (p *AssertPermissionResult) GetError3() *UnauthorizedError {
	if !p.IsSetError3() {
		return AssertPermissionResult_Error3_DEFAULT
	}
	return p.Error3
}

var AssertPermissionResult_Error4_DEFAULT *ForbiddenError

func (p *AssertPermissionResult) GetError4() *ForbiddenError {
	if !p.IsSetError4() {
		return AssertPermissionResult_Error4_DEFAULT
	}
	return p.Error4
}

var AssertPermissionResult_Error5_DEFAULT *NotFoundError

func (p *AssertPermissionResult) GetError5() *NotFoundError {
	if !p.IsSetError5() {
		return AssertPermissionResult_Error5_DEFAULT
	}
	return p.Error5
}
func (p *AssertPermissionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AssertPermissionResult) IsSetError1() bool {
	return p.Error1 != nil
}

func (p *AssertPermissionResult) IsSetError2() bool {
	return p.Error2 != nil
}

func (p *AssertPermissionResult) IsSetError3() bool {
	return p.Error3 != nil
}

func (p *AssertPermissionResult) IsSetError4() bool {
	return p.Error4 != nil
}

func (p *AssertPermissionResult) IsSetError5() bool {
	return p.Error5 != nil
}

func (p *AssertPermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AssertPermissionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AssertPermissionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Error1 = &ServerError{}
	if err := p.Error1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error1, err)
	}
	return nil
}

func (p *AssertPermissionResult) ReadField2(iprot thrift.TProtocol) error {
	p.Error2 = &BadRequestError{}
	if err := p.Error2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error2, err)
	}
	return nil
}

func (p *AssertPermissionResult) ReadField3(iprot thrift.TProtocol) error {
	p.Error3 = &UnauthorizedError{}
	if err := p.Error3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error3, err)
	}
	return nil
}

func (p *AssertPermissionResult) ReadField4(iprot thrift.TProtocol) error {
	p.Error4 = &ForbiddenError{}
	if err := p.Error4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error4, err)
	}
	return nil
}

func (p *AssertPermissionResult) ReadField5(iprot thrift.TProtocol) error {
	p.Error5 = &NotFoundError{}
	if err := p.Error5.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Error5, err)
	}
	return nil
}

func (p *AssertPermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("assertPermission_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AssertPermissionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AssertPermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError1() {
		if err := oprot.WriteFieldBegin("error1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:error1: %s", p, err)
		}
		if err := p.Error1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:error1: %s", p, err)
		}
	}
	return err
}

func (p *AssertPermissionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetError2() {
		if err := oprot.WriteFieldBegin("error2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:error2: %s", p, err)
		}
		if err := p.Error2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:error2: %s", p, err)
		}
	}
	return err
}

func (p *AssertPermissionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetError3() {
		if err := oprot.WriteFieldBegin("error3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:error3: %s", p, err)
		}
		if err := p.Error3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:error3: %s", p, err)
		}
	}
	return err
}

func (p *AssertPermissionResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetError4() {
		if err := oprot.WriteFieldBegin("error4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:error4: %s", p, err)
		}
		if err := p.Error4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:error4: %s", p, err)
		}
	}
	return err
}

func (p *AssertPermissionResult) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetError5() {
		if err := oprot.WriteFieldBegin("error5", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:error5: %s", p, err)
		}
		if err := p.Error5.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Error5, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:error5: %s", p, err)
		}
	}
	return err
}

func (p *AssertPermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AssertPermissionResult(%+v)", *p)
}
